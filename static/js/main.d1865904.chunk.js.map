{"version":3,"sources":["github.svg","serviceWorker.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","MyComponent","class","strings","this","props","data","typeSpeed","loop","React","Component","TerminalDesign","href","url","url_display","MainPage","src","GitHub_image","alt","Body","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,oC,qLCYrCC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,4CCrF3DC,E,iLAEF,OACE,yBAAKC,MAAM,kDACT,kBAAC,IAAD,CAAOC,QAASC,KAAKC,MAAMC,KAAMC,UAAW,GAAIC,MAAI,S,GAJlCC,IAAMC,WAU1BC,E,iLAEF,OACE,yBAAKT,MAAM,YACT,yBAAKA,MAAM,wCACT,yBAAKA,MAAM,0BACX,yBAAKA,MAAM,6BACX,yBAAKA,MAAM,0BAEb,yBAAKA,MAAM,0CACT,uBAAGA,MAAM,qCAAT,iBACgB,0BAAMA,MAAM,WAAZ,MAEhB,uBAAGA,MAAM,qCAAT,sFAEiB,0BAAMA,MAAM,WAAZ,MAEjB,uBAAGA,MAAM,qCAAT,wDAEE,0BAAMA,MAAM,WAAZ,MAEF,uBAAGA,MAAM,uCACNE,KAAKC,MAAMC,KACZ,uBAAGM,KAAMR,KAAKC,MAAMQ,KAAMT,KAAKC,MAAMS,aACrC,0BAAMZ,MAAM,WAAZ,MAEF,uBAAGA,MAAM,SAAT,IACG,0BAAMA,MAAM,WAAZ,Y,GA3BgBO,IAAMC,WAmC7BK,E,iLAEF,OACE,6BAEE,yBAAKb,MAAM,WACT,kBAAC,EAAD,CACEI,KAAM,CAAC,oBAAqB,mBAAoB,sBAElD,yBAAKJ,MAAM,UACT,yBAAKc,IAAKC,IAAcC,IAAI,KAC5B,uBAAGN,KAAK,8BAA8BV,MAAM,cAA5C,YAKJ,yBAAKA,MAAM,UACT,kBAAC,EAAD,CACEI,KAAM,0CACNO,IAAI,8BACJC,YAAY,qB,GApBDL,IAAMC,WA4BvBS,E,iLAEF,OACE,6BACE,kBAAC,EAAD,W,GAJWV,IAAMC,WAUzBU,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDxE3C,SAAkBxC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwC,IAAIC,qBAAwBhD,OAAOC,SAASkC,MACpDc,SAAWjD,OAAOC,SAASgD,OAIvC,OAGFjD,OAAOkD,iBAAiB,QAAQ,WAC9B,IAAM7C,EAAK,UAAM2C,qBAAN,sBAEPlD,IAgEV,SAAiCO,EAAOC,GAEtC6C,MAAM9C,EAAO,CACX+C,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAA2C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClD,UAAUC,cAAckD,MAAMhD,MAAK,SAAAC,GACjCA,EAAagD,aAAajD,MAAK,WAC7BV,OAAOC,SAAS2D,eAKpBxD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA0C,CAAwBxD,EAAOC,GAI/BC,UAAUC,cAAckD,MAAMhD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCgD/BE,K","file":"static/js/main.d1865904.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.5b9b92fc.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import Land from \"./web2.jpeg\";\nimport GitHub_image from \"./github.svg\";\nimport \"./terminal.css\";\n\nimport Typed from \"react-typed\";\n\nclass MyComponent extends React.Component {\n  render() {\n    return (\n      <div class=\"typewriter col-lg-6 col-sm-6 col-md-8 col-xl-6\">\n        <Typed strings={this.props.data} typeSpeed={90} loop />\n      </div>\n    );\n  }\n}\n\nclass TerminalDesign extends React.Component {\n  render() {\n    return (\n      <div class=\"terminal\">\n        <div class=\"fakeMenu col-lg-8 col-md-8 col-sm-12\">\n          <div class=\"fakeButtons fakeClose\"></div>\n          <div class=\"fakeButtons fakeMinimize\"></div>\n          <div class=\"fakeButtons fakeZoom\"></div>\n        </div>\n        <div class=\"fakeScreen col-lg-8 col-md-8 col-sm-12\">\n          <p class=\"line1 col-lg-8 col-md-8 col-sm-12\">\n            $ yo foss-gect<span class=\"cursor1\">_</span>\n          </p>\n          <p class=\"line2 col-lg-8 col-md-8 col-sm-12\">\n            Out of the box I include HTML5 Bootstrap, jQuery, and a react.js to\n            build your app.<span class=\"cursor2\">_</span>\n          </p>\n          <p class=\"line3 col-lg-8 col-md-8 col-sm-12\">\n            [?] What more would you like? (Press space to select)\n            <span class=\"cursor3\">_</span>\n          </p>\n          <p class=\"line2 col-lg-10 col-md-10 col-sm-12\">\n            {this.props.data}\n            <a href={this.props.url}>{this.props.url_display}</a>\n            <span class=\"cursor2\">_</span>\n          </p>\n          <p class=\"line4\">\n            ><span class=\"cursor4\">_</span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass MainPage extends React.Component {\n  render() {\n    return (\n      <div>\n        {/* <img src={Land} alt=\"Langing Page\" class=\"landing_image\" /> */}\n        <div class=\"content\">\n          <MyComponent\n            data={[\"We are developers\", \"We are designers\", \"We change future\"]}\n          />\n          <div class=\"github\">\n            <img src={GitHub_image} alt=\"\" />\n            <a href=\"https://github.com/fossgect\" class=\"anchor_git\">\n              GitHub\n            </a>\n          </div>\n        </div>\n        <div class=\"middle\">\n          <TerminalDesign\n            data={\"Visit the Github Page for more details.\"}\n            url=\"https://github.com/fossgect\"\n            url_display=\"Click here\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Body extends React.Component {\n  render() {\n    return (\n      <div>\n        <MainPage />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Body />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}